// Code generated by MockGen. DO NOT EDIT.
// Source: model/model.go
//
// Generated by this command:
//
//	mockgen -source=model/model.go -destination=test/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/jcserv/mjurl/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIURLService is a mock of IURLService interface.
type MockIURLService struct {
	ctrl     *gomock.Controller
	recorder *MockIURLServiceMockRecorder
}

// MockIURLServiceMockRecorder is the mock recorder for MockIURLService.
type MockIURLServiceMockRecorder struct {
	mock *MockIURLService
}

// NewMockIURLService creates a new mock instance.
func NewMockIURLService(ctrl *gomock.Controller) *MockIURLService {
	mock := &MockIURLService{ctrl: ctrl}
	mock.recorder = &MockIURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLService) EXPECT() *MockIURLServiceMockRecorder {
	return m.recorder
}

// GetURLByLong mocks base method.
func (m *MockIURLService) GetURLByLong(ctx context.Context, long model.LongURL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByLong", ctx, long)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByLong indicates an expected call of GetURLByLong.
func (mr *MockIURLServiceMockRecorder) GetURLByLong(ctx, long any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByLong", reflect.TypeOf((*MockIURLService)(nil).GetURLByLong), ctx, long)
}

// GetURLByShort mocks base method.
func (m *MockIURLService) GetURLByShort(ctx context.Context, short model.ShortURL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByShort", ctx, short)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByShort indicates an expected call of GetURLByShort.
func (mr *MockIURLServiceMockRecorder) GetURLByShort(ctx, short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByShort", reflect.TypeOf((*MockIURLService)(nil).GetURLByShort), ctx, short)
}

// InsertURL mocks base method.
func (m *MockIURLService) InsertURL(ctx context.Context, url *model.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertURL indicates an expected call of InsertURL.
func (mr *MockIURLServiceMockRecorder) InsertURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertURL", reflect.TypeOf((*MockIURLService)(nil).InsertURL), ctx, url)
}

// ShortenURL mocks base method.
func (m *MockIURLService) ShortenURL(ctx context.Context, long model.LongURL) (model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", ctx, long)
	ret0, _ := ret[0].(model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockIURLServiceMockRecorder) ShortenURL(ctx, long any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockIURLService)(nil).ShortenURL), ctx, long)
}

// MockIURLStore is a mock of IURLStore interface.
type MockIURLStore struct {
	ctrl     *gomock.Controller
	recorder *MockIURLStoreMockRecorder
}

// MockIURLStoreMockRecorder is the mock recorder for MockIURLStore.
type MockIURLStoreMockRecorder struct {
	mock *MockIURLStore
}

// NewMockIURLStore creates a new mock instance.
func NewMockIURLStore(ctrl *gomock.Controller) *MockIURLStore {
	mock := &MockIURLStore{ctrl: ctrl}
	mock.recorder = &MockIURLStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIURLStore) EXPECT() *MockIURLStoreMockRecorder {
	return m.recorder
}

// CreateURL mocks base method.
func (m *MockIURLStore) CreateURL(ctx context.Context, url *model.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURL indicates an expected call of CreateURL.
func (mr *MockIURLStoreMockRecorder) CreateURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockIURLStore)(nil).CreateURL), ctx, url)
}

// QueryURL mocks base method.
func (m *MockIURLStore) QueryURL(ctx context.Context, id model.URLID) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryURL", ctx, id)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryURL indicates an expected call of QueryURL.
func (mr *MockIURLStoreMockRecorder) QueryURL(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryURL", reflect.TypeOf((*MockIURLStore)(nil).QueryURL), ctx, id)
}

// QueryURLByLong mocks base method.
func (m *MockIURLStore) QueryURLByLong(ctx context.Context, long model.LongURL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryURLByLong", ctx, long)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryURLByLong indicates an expected call of QueryURLByLong.
func (mr *MockIURLStoreMockRecorder) QueryURLByLong(ctx, long any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryURLByLong", reflect.TypeOf((*MockIURLStore)(nil).QueryURLByLong), ctx, long)
}

// QueryURLByShort mocks base method.
func (m *MockIURLStore) QueryURLByShort(ctx context.Context, short model.ShortURL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryURLByShort", ctx, short)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryURLByShort indicates an expected call of QueryURLByShort.
func (mr *MockIURLStoreMockRecorder) QueryURLByShort(ctx, short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryURLByShort", reflect.TypeOf((*MockIURLStore)(nil).QueryURLByShort), ctx, short)
}
